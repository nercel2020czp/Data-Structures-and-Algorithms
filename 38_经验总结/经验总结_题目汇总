/剑指offer_力扣/src/面试题12_矩阵中的路径/Solution1.java
--------------------------------------------------
/剑指offer_力扣/src/面试题13_机器人的运动范围/Solution2.java
方法二：广度优先遍历 BFS
	1.BFS/DFS ： 两者目标都是遍历整个矩阵，不同点在于搜索顺序不同。
	  DFS 是朝一个方向走到底，再回退，以此类推；BFS 则是按照“平推”的方式向前搜索。
	2.BFS 实现： 通常利用队列实现广度优先遍历。
--------------------------------------------------
/剑指offer_力扣/src/面试题15_二进制中1的个数/Solution3.java
与二进制有关的题目，通常应使用 位运算 解决。
--------------------------------------------------
/剑指Offer_牛客/src/t003_从尾到头打印链表/Solution1.java
/*ArrayList 中有个方法是 add(index,value)，可以指定 index 位置插入 value 值,所以我们在遍历
  listNode 的同时将每个遇到的值插入到 list 的 0 位置，最后输出 listNode 即可得到逆序链表
  【ArrayList可以充当栈来使用】
 */
--------------------------------------------------
/剑指Offer_牛客/src/t004_重建二叉树/Solution1.java
Arrays.copyOfRange(pre, 1, i + 1)新使用方法
--------------------------------------------------
/剑指Offer_牛客/src/t020_包含min函数的栈/Solution2.java
我们发现其实最小值min它本身就是一种冗余信息。为什么呢？因为每个元素在数值
上都包含了min值，举个例子，假设入栈序列为：4、5、6、3、2、1，那么各轮次
对应的min值就是：4、4、4、3、2、1，发现有：
Stack<Integer> stack_;//错误写法java.lang.NullPointerException
Stack<Integer> stack_ = new Stack<Integer>();//正确写法
--------------------------------------------------
/剑指Offer_牛客/src/t022_从上往下打印二叉树/Solution1.java
在Java中Queue是和List、Map同等级别的接口，LinkedList中也实现了Queue接口，该接口中的主要函数有：
--------------------------------------------------
/剑指Offer_牛客/src/t023_二叉搜索树的后序遍历序列/Solution1.java
【for循环的用法】
        //找到左右子数的分界点
/*        for(i=start; i < root; i++)
            if(sequence[i] > key)
                break;*/
        for(i=start; i < root && sequence[i] <= key; i++);
--------------------------------------------------
/树/src/t0144_二叉树的前序遍历_binary_tree_preorder_traversal/Solution1.java
List<Integer> resList = new LinkedList<>();
LinkedList<TreeNode> stack = new LinkedList<>();//性能更好？
Stack<TreeNode> stack = new Stack<>();
--------------------------------------------------
/剑指Offer_牛客/src/t027_字符串的排列/Solution2.java
总结
这道题是常规回溯基本应用，最好是学习了回溯后拿来练手，这次总共碰到了两个坑：

重复问题，一开始用 ArrayList 存，有重复结果，用 TreeSet 解决
StringBuilder 删除越界，因为每次删除，我们相当于要删除路径的最后一个字符，而一开始我删除的是第 i 个，
那么可能前面的删除了，导致 i 大于当前字符串的最大长度，就越界了
PS：回溯法是真的神奇，Duang 的一下，就回溯 = =，同时排列组合问题，一般是回溯法解
--------------------------------------------------
t028_数组中出现次数超过一半的数字.Solution2
t028_数组中出现次数超过一半的数字.Solution2
实用技巧
Arrays.sort(array);可以对数组进行排序
Stream实例.filter(过滤规则)可对流中的数据进行筛选
--------------------------------------------------
/剑指Offer_牛客/src/t031_整数中1出现的次数_从1到n整数中1出现的次数_/Solution2.java
数学方法分析总结
--------------------------------------------------
/剑指Offer_牛客/src/t033_丑数/Solution1.java
if(index <= 0) return 0;//这种判断条件是一定要注意的
--------------------------------------------------
// 用一个类似hash的东西来存储字符出现的次数，很方便
//刚开始还以为有什么特殊的解法，没想到当年也是按照hash的思想来做的，先统计出现的次数，然后在返回相应的index
int[] count = new int[256];//一个简易的hash表
/剑指Offer_牛客/src/t034_第一个只出现一次的字符位置/Solution1.java
--------------------------------------------------
/数组/src/t0136_只出现一次的数字_single_number/Solution2.java
异或运算总结：
异或是一种基于二进制的位运算，用符号XOR或者 ^ 表示，
其运算法则是对运算符两侧数的每一个二进制位，同值取0，异值取1。
它与布尔运算的区别在于，当运算符两侧均为1时，布尔运算的结果为1，异或运算的结果为0。
一、异或的性质
交换律：a ^ b = b ^ a
结合律：a ^ b ^ c = a ^ (b ^ c) = (a ^ b) ^ c
d = a ^ b ^ c 可以推出 a = d ^ b ^ c
自反性：a ^ b ^ a = b
--------------------------------------------------
/剑指Offer_牛客/src/t042_和为S的两个数字/Solution1.java
public ArrayList<Integer> FindNumbersWithSum(int [] array, int sum) {
	ArrayList<Integer> result=new ArrayList<Integer>();
    //边界条件
    if(array==null||array.length<=1){
        return result;//这个地方返回的是Result
    }
}
输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，
如果有多对数字的和等于S，输出两个数的乘积最小的。
--------------------------------------------------
/树/src/l_面试题32_III_从上到下打印二叉树_III/Solution1.java
/*
优化：
if (num % 2 == 0)
	Collections.reverse(list);
//列表反转那一步可以优化掉，list.add() 改成 LinkedList addFirst() 和 add() 搭配使用
*/
--------------------------------------------------
/剑指Offer_牛客/src/t059_按之字形顺序打印二叉树/Solution1.java
if (!reverse) {
	list.add(node.val);
} else {
	list.add(0, node.val);// 每次加到0的位置，就自动逆序了
}
reverse = !reverse;//
--------------------------------------------------
/剑指Offer_牛客/src/t063_数据流中的中位数/Solution1.java
// 个数为偶数的话，则先插入到大顶堆，然后将大顶堆中最大的数插入小顶堆中
		if (count % 2 == 0) {// if((count & 1) == 0)
--------------------------------------------------
单调队列解题详解:
/队列/src/l_0239_滑动窗口最大值_sliding_window_maximum/Solution2.java
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------