package l_0191_位1的个数_number_of_1_bits;

/*
方法 1：循环和位移动
算法
这个方法比较直接。我们遍历数字的 32 位。如果某一位是 11 ，将计数器加一。

我们使用 位掩码 来检查数字的第 i^{th} 位。一开始，掩码 m=1 因为 1 的二进制表示是
		0000 0000 0000 0000 0000 0000 0000 0001
显然，任何数字跟掩码 11 进行逻辑与运算，都可以让我们获得这个数字的最低位。
检查下一位时，我们将掩码左移一位。		
		0000 0000 0000 0000 0000 0000 0000 0010
		
并重复此过程。
*/
public class Solution1 {
	public int hammingWeight(int n) {
	    int bits = 0;
	    int mask = 1;
	    for (int i = 0; i < 32; i++) {
	        if ((n & mask) != 0) {
	            bits++;
	        }
	        mask <<= 1;
	    }
	    return bits;
	}
	
/*	
	复杂度分析
	时间复杂度：O(n)。运行时间依赖于数字 n 的位数。由于这题中 n 是一个 32 位数，所以运行时间是 O(1) 的。
	空间复杂度：O(1)。没有使用额外空间。
	
	*/
/*	
	执行用时 :
		1 ms
		, 在所有 Java 提交中击败了
		99.79%
		的用户
		内存消耗 :
		36.3 MB
		, 在所有 Java 提交中击败了
		5.04%
		的用户
	*/
}
