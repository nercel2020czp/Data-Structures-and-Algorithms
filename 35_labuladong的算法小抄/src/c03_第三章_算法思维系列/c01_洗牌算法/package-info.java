/**
 * 
 */
/**
 * @author 15753
 *
 */
package c03_第三章_算法思维系列.c01_洗牌算法;
/*
我知道大家会各种花式排序算法，但是如果叫你打乱一个数组，
你是否能做到胸有成竹？即便你拍脑袋想出一个算法，怎么证明
你的算法就是正确的呢？乱序算法不像排序算法，结果唯一可以很
容易检验，因为「乱」可以有很多种，你怎么能证明你的算法是
「真的乱」呢？

所以我们面临两个问题：
	1.什么叫做「真的乱」？
	2.设计怎样的算法来打乱数组才能做到「真的乱」？

这种算法称为「随机乱置算法」或者「洗牌算法」。

本文分两部分，第一部分详解最常用的洗牌算法。
因为该算法的细节容易出错，且存在好几种变体，虽有细微差异但都是正确的，
所以本文要介绍一种简单的通用思想保证你写出正确的洗牌算法。

第二部分讲解使用「蒙特卡罗方法」来检验我们的打乱结果是不是真的乱。
蒙特卡罗方法的思想不难，但是实现方式也各有特点的。

--------------------------------------

一、洗牌算法
此类算法都是靠随机选取元素交换来获取随机性，直接看代码（伪码），
该算法有 4 种形式，都是正确的：
// 得到一个在闭区间 [min, max] 内的随机整数
int randInt(int min, int max);

// 第一种写法
void shuffle(int[] arr) {
    int n = arr.length();
    // 区别只有这两行 /
    for (int i = 0 ; i < n; i++) {
        // 从 i 到最后随机选一个元素
        int rand = randInt(i, n - 1);
        ///////////////////////
        swap(arr[i], arr[rand]);
    }
}
*/